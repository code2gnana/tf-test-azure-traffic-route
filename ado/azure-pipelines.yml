# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

# trigger:
# - main

pool:
  vmImage: ubuntu-latest

variables:
  # Store these securely in Azure DevOps variable groups or secrets!
  AZURE_SUBSCRIPTION_ID: $(azureSubscriptionId)
  AZURE_CLIENT_ID: $(azureClientId)
  AZURE_CLIENT_SECRET: $(azureClientSecret)
  AZURE_TENANT_ID: $(azureTenantId)
  TF_VERSION: '1.10.5'

stages:
  - stage: Terraform
    jobs:
    - job: Terraform_Init_Plan
      steps:
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            wget https://releases.hashicorp.com/terraform/$(TF_VERSION)/terraform_$(TF_VERSION)_linux_amd64.zip
            unzip terraform_$(TF_VERSION)_linux_amd64.zip
            sudo mv terraform /usr/local/bin/
            terraform -version
      - script: |
          echo "##[section]Logging in to Azure..."
          az login --service-principal --username $(AZURE_CLIENT_ID) --password $(AZURE_CLIENT_SECRET) --tenant $(AZURE_TENANT_ID)
          az account set --subscription $(AZURE_SUBSCRIPTION_ID)
        displayName: 'Azure CLI Login'
      - script: |
          echo "##[section]Initializing Terraform..."
          terraform init -input=false
        displayName: 'Terraform Init'
      - script: |
          echo "##[section]Planning Terraform changes..."
          export ARM_SUBSCRIPTION_ID=$(AZURE_SUBSCRIPTION_ID)
          export ARM_CLIENT_ID=$(AZURE_CLIENT_ID)
          export ARM_CLIENT_SECRET=$(AZURE_CLIENT_SECRET)
          export ARM_TENANT_ID=$(AZURE_TENANT_ID)
          terraform plan -out=tfplan -input=false
        displayName: 'Terraform Plan'
      # - task: PublishPipelineArtifact@1
      #   inputs:
      #     targetPath: '$(System.DefaultWorkingDirectory)'
      #     artifact: 'tfplan'
      #   displayName: 'Publish Terraform Plan Artifact'
      # - script: |
      #     echo "##[section]Applying Terraform changes..."
      #     terraform apply -input=false tfplan
      #   displayName: 'Terraform Apply' # Uncomment to enable apply step
      # - task: AzureCLI@2
      #   inputs:
      #     azureSubscription: '$(AZURE_SUBSCRIPTION_ID)'
      #     scriptType: 'bash'
      #     scriptLocation: 'inlineScript'
      #     inlineScript: |
      #       echo "##[section]Cleaning up resources..."
      #       terraform destroy -auto-approve
      #   displayName: 'Terraform Destroy' # Uncomment to enable destroy step
# Note: Be cautious with the destroy step; uncomment only if you want to clean up resources automatically.
# Ensure sensitive variables are stored securely in Azure DevOps and not hardcoded.
